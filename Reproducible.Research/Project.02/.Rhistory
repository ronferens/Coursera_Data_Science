View(completedData)
summary(completedData)
avrgValue <- function(steps, interval) {
stepsValue<-steps
if (is.na(steps))
stepsValue <- averageNumberOfStepsTakenPerInterval[interval]
return(stepsValue)
}
completedData <- rawData
completedData$steps <- mapply(avrgValue, completedData$steps, completedData$interval)
summary(completedData)
install.packages("ggplot2")
data$interval[which.max(averageNumberOfStepsTakenPerInterval)]
as.integer(data$interval[which.max(averageNumberOfStepsTakenPerInterval)])
as.factor(data$interval[which.max(averageNumberOfStepsTakenPerInterval)])
data$interval[which.max(averageNumberOfStepsTakenPerInterval),]
data$interval[which.max(averageNumberOfStepsTakenPerInterval)]
d<-completedData
d$newCol <- 1:17568
View(d)
rm (d)
res<-weekdays(completedData$date)
res<-weekdays(as.Date(completedData$date))
res<-weekdays.Date(completedData$date)
res<-weekdays(as.Date(completedData$date))
levels(res)
levels(as.factor(res))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(completedData)
levels(as.factor(completedData))
levels(completedData)
summary(completedData)
levels(as.factor(completedData$dayType))
summary(completedData$dayType)
summary(as.factor(completedData$dayType))
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
summary(completedData$dayType)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
summary(completedData$dayType)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
View(completedData)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
averageData <- aggregate(steps ~ interval + dayType, data = completedData, mean)
ggplot(averageData, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) + xlab("5-minute interval")
+ ylab("Number of steps")
averageData <- aggregate(steps ~ interval + dayType, data = completedData, mean)
ggplot(averageData, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) + xlab("5-minute interval") + ylab("Number of steps")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
averages <- aggregate(steps ~ interval + day, data = completedData, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + day, data = completedData, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
averages <- aggregate(steps ~ interval + day, data = completedData, mean)
averages <- aggregate(steps ~ interval + dayType, data = completedData, mean)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
averages <- aggregate(steps ~ interval + dayType, data = completedData, mean)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
View(averages)
ggplot(averages, aes(interval, steps)) + geom_line() + facet_grid(dayType) +
xlab("5-minute interval") + ylab("Number of steps")
ggplot(data = averages, aes(interval, steps)) + geom_line() + facet_grid(dayType ~ .) +
xlab("5-minute interval") + ylab("Number of steps")
library(lattice)
xyplot(averageData$steps ~ averageData$interval|averageData$dayType, main="Average Steps per Day by Interval",xlab="Interval", ylab="Steps",layout=c(1,2), type="l")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
knit2html("PA1_template.Rmd")
knit2html()
sessionInfo()
install.packages("knitr")
if(!download.file("sdsdfs",
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cwd
getwd()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
destFileZip
unzip(destFileZip, exdir=dataDir)
unzip(destFileZip, exdir="./")
unzip(destFileZip)
unzip(destFileZip, exdir="Data")
unzip(destFileZip, exdir="/Data")
unzip(destFileZip, exdir="./Data")
unzip()
?unzip()
unzip(destFileZip, exdir=".")
unzip("Data/repdata-data-StormData.csv.zip", exdir=".")
unzip("Data/repdata-data-StormData.csv.zip", exdir="./Data")
warning()
unzip("Data/repdata-data-StormData.csv.zip", exdir="./Data")
warning()
unzip("Data/repdata-data-StormData.csv.zip", exdir="./Data") warning()
warning(unzip("Data/repdata-data-StormData.csv.zip", exdir="./Data"))
unzip("Data/repdata-data-StormData.csv.zip", "Data/repdata-data-StormData.csv")
unzip("Data/repdata-data-StormData.csv.zip", "Data/repdata-data-StormData.csv")
unzip("Data/repdata-data-StormData.csv.zip", "repdata-data-StormData.csv")
unzip("repdata-data-StormData.csv.zip", "repdata-data-StormData.csv")
getwd()
unzip("repdata-data-StormData.csv.zip")
unzip("repdata-data-StormData.csv.zip", "file.csv")
source('~/.active-rstudio-document', echo=TRUE)
unzip(temp, stomDataFile)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/")
dataDir <- "./Data"
destFileZip <- paste(dataDir, sep="/", "repdata-data-StormData.csv.bz2")
unzip(destFileZip, exdir=dataDir)
stomData <- read.csv(stomDataFile)
stomData <- read.csv(destFileZip)
View(stomData)
save.image("C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_data.RData")
names(stomData)
summary(stomData)
head(stormData)
head(stomData)
dim(stomData)
View(stomData)
summary(stomData$MAG)
source('~/.active-rstudio-document', echo=TRUE)
# setwd("C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/")
# dataDir <- "./Data"
#
# destFileZip <- paste(dataDir, sep="/", "repdata-data-StormData.csv.bz2")
# if(!file.exists(destFileZip)) {
#   url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
#   download.file(url, dest=destFileZip, mode="wb")
# }
stormData <- read.csv(destFileZip)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/")
dataDir <- "./Data"
destFileZip <- paste(dataDir, sep="/", "repdata-data-StormData.csv.bz2")
# if(!file.exists(destFileZip)) {
#   url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2"
#   download.file(url, dest=destFileZip, mode="wb")
# }
stormData <- read.csv(destFileZip)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(stormData$FATALITIES)
summary(stormData$FATALITIES)
summary(stormData$INJURIES)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(stormData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
data <- stormData[complete.cases(stormData$FATALITIES) & complete.cases(stormData$INJURIES), ]
sum(!complete.cases(stormData$INJURIES))
View(data)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(populationHealthData)
View(data)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(populationHealthData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(populationHealthData)
cbind("EVTYPE", "FATALITIES", "INJURIES")
names(populationHealthData) <- cbind("EVTYPE", "FATALITIES", "INJURIES")
View(populationHealthData)
setNames(populationHealthData, cbind("EVTYPE", "FATALITIES", "INJURIES"))
View(populationHealthData)
colnames(populationHealthData) <- cbind("EVTYPE", "FATALITIES", "INJURIES")
View(populationHealthData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(populationHealthData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(data)
View(stormData)
summary(stormData$EVTYPE)
levels(stormData$EVTYPE)
unique(stormData$EVTYPE)
View(data)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
view(d)
View(d)
d<-populationHealthData[,order(populationHealthData$FATALITIES)]
d<-populationHealthData[order(populationHealthData$FATALITIES),]
View(d)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(d)
levels(stormData$EVTYPE)
names(stormData)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
order(column)
aggData[order(column,),]
aggData[order(aggData[,column])]
aggData[order(aggData[,aggData[,2]])]
aggData[order(aggData[,aggData[,1])]
View(aggData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
colIndex
as.numeric(colIndex)
typeof(colIndex)
aggData <- aggregate(dataset[,index], by=list(dataset$EVTYPE), sum, na.rm=TRUE)
View(dataset)
data[,data$colName]
data[,index]
data[[index]]
aggData <- aggregate(dataset[,colIndex], by=list(dataset$EVTYPE), sum, na.rm=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(aggData)
D <- aggData[order(-dataset[,colIndex]),]
View(D)
dataset[,colIndex])
D<-dataset[,colIndex]
D<-order(-D)
D <-aggData[order(-dataset[,colIndex]),]
View(D)
View(aggData)
D <-aggData[order(-dataset[,colName]),]
View(D)
D <-aggData[order(-dataset[,2]),]
D <-aggData[order(dataset[,2]),]
View(D)
D <-aggData[order(dataset[,colIndex]),]
View(D)
aggData[order(-dataset[,colIndex]),]
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByFatalitites)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
D <- sort(aggData, by=~ -colIndex)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
D<-order(-aggData[,colIndex])
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
aggData[[colName]]
View(evntByFatalitites)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(evntByInjuries)
View(evntByFatalitites)
View(evntByInjuries)
View(evntByFatalitites)
View(evntByFatalitites)
View(evntByInjuries)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
evntByFatalititesPlot
plot(evntByFatalititesPlot)
print(evntByFatalititesPlot)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
print(evntByFatalititesPlot)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
print(evntByFatalititesPlot)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
print(evntByFatalititesPlot)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(aggData)
aggData[1:threhold,]
n
View(evntByFatalitites)
View(stormData)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(aggData)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
debugSource('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
evntByFatalititesPlot <- ggplot(data = evntByFatalitites,
aes(x=reorder(EVTYPE, FATALITIES),
y=FATALITIES), fill=evntByFatalitites$FATALITIES) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Fatalities", title="Fatalities By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(evntByFatalititesPlot)
install.packages("gridExtra")
View(evntByFatalitites)
library(gridExtra)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
levels(stormData$PROPDMGEXP)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
typeof(stormData$PROPDMG)
typeof(stormData$PROPDMGEXP)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
View(stormData)
evntByPropDmg <- sortEvntTypeByColumn(stormData, "PROPDMG_VAL", 10)
source('C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_code.R', echo=TRUE)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(evntByCropDmg)
View(evntByCropDmg)
View(evntByPropDmg)
View(evntByCropDmg)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type")
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type")
print(evntByPropDmgPlot)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(evntByPropDmgPlot)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(evntByPropDmgPlot)
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation", title="Total Crop-Damage Estimation By Event Type") + +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(evntByCropDmg)
View(evntByCropDmg)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation", title="Total Crop-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation [USD]", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation [USD]", title="Total Crop-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation [USD]", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation [USD]", title="Total Crop-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
evntByFatalitites
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation [USD]", title="Total Property-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation [USD]", title="Total Crop-Damage Estimation By Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
load("C:/Users/rferens/Git/datasciencecoursera/Reproducible.Research/Project.02/project_data.RData")
source('~/.active-rstudio-document', echo=TRUE)
stormData$PROPDMG_VAL <- mapply(damageEstimation, stormData$PROPDMG, stormData$PROPDMGEXP)
evntByPropDmg <- sortEvntTypeByColumn(stormData, "PROPDMG_VAL", 10)
stormData$CROPDMG_VAL <- mapply(damageEstimation, stormData$CROPDMG, stormData$CROPDMGEXP)
evntByCropDmg <- sortEvntTypeByColumn(stormData, "CROPDMG_VAL", 10)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation [USD]", title="Total Property-Damage Estimation\nBy Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation [USD]", title="Total Crop-Damage Estimation\nBy Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
damageEstimation <- function(damageValue, damageMagnitude) {
if(damageMagnitude %in% c('h','H'))
damageEstimation <- damageValue * (10 ** 2)
else if(damageMagnitude == 'K')
damageEstimation <- damageValue * (10 ** 3)
else if(damageMagnitude %in% c('m','M'))
damageEstimation <- damageValue * (10 ** 6)
else if(damageMagnitude == 'B')
damageEstimation <- damageValue * (10 ** 9)
else
damageEstimation <- damageValue
return(damageEstimation)
}
stormData$PROPDMG_VAL <- mapply(damageEstimation, stormData$PROPDMG, stormData$PROPDMGEXP)
evntByPropDmg <- sortEvntTypeByColumn(stormData, "PROPDMG_VAL", 10)
stormData$CROPDMG_VAL <- mapply(damageEstimation, stormData$CROPDMG, stormData$CROPDMGEXP)
evntByCropDmg <- sortEvntTypeByColumn(stormData, "CROPDMG_VAL", 10)
evntByPropDmgPlot <- ggplot(data = evntByPropDmg,
aes(x=reorder(EVTYPE, -PROPDMG_VAL), y=PROPDMG_VAL, fill=PROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Property-Damage Estimation [USD]", title="Total Property-Damage Estimation\nBy Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
evntByCropDmgPlot <- ggplot(data = evntByCropDmg,
aes(x=reorder(EVTYPE, -CROPDMG_VAL), y=CROPDMG_VAL, fill=CROPDMG_VAL)) +
geom_bar(stat="identity") +
labs(x="Event Type", y="Total Crop-Damage Estimation [USD]", title="Total Crop-Damage Estimation\nBy Event Type") +
theme(axis.text.x = element_text(angle = 45, hjust = 1), legend.position="none")
grid.arrange(evntByPropDmgPlot, evntByCropDmgPlot, ncol=2, nrow=1)
damageEstimation <- function(damageValue, damageMagnitude) {
if(damageMagnitude %in% c('h','H'))
damageEstimation <- damageValue * (10 ** 2)
else if(damageMagnitude == 'K')
damageEstimation <- damageValue * (10 ** 3)
else if(damageMagnitude %in% c('m','M'))
damageEstimation <- damageValue * (10 ** 6)
else if(damageMagnitude == 'B')
damageEstimation <- damageValue * (10 ** 9)
else
damageEstimation <- damageValue
return(damageEstimation)
}
stormData$PROPDMG_VAL <- mapply(damageEstimation, stormData$PROPDMG, stormData$PROPDMGEXP)
evntByPropDmg <- sortEvntTypeByColumn(stormData, "PROPDMG_VAL", 10)
stormData$CROPDMG_VAL <- mapply(damageEstimation, stormData$CROPDMG, stormData$CROPDMGEXP)
evntByCropDmg <- sortEvntTypeByColumn(stormData, "CROPDMG_VAL", 10)
damageEstimation <- function(damageValue, damageMagnitude) {
if(damageMagnitude %in% c('h','H'))
damageEstimation <- damageValue * (10 ** 2)
else if(damageMagnitude == 'K')
damageEstimation <- damageValue * (10 ** 3)
else if(damageMagnitude %in% c('m','M'))
damageEstimation <- damageValue * (10 ** 6)
else if(damageMagnitude == 'B')
damageEstimation <- damageValue * (10 ** 9)
else
damageEstimation <- damageValue
return(damageEstimation)
}
stormData$PROPDMG_VAL <- mapply(damageEstimation, stormData$PROPDMG, stormData$PROPDMGEXP)
evntByPropDmg <- sortEvntTypeByColumn(stomData, "PROPDMG_VAL", 10)
stormData$CROPDMG_VAL <- mapply(damageEstimation, stormData$CROPDMG, stormData$CROPDMGEXP)
evntByCropDmg <- sortEvntTypeByColumn(stomData, "CROPDMG_VAL", 10)
damageEstimation <- function(damageValue, damageMagnitude) {
if(damageMagnitude %in% c('h','H'))
damageEstimation <- damageValue * (10 ** 2)
else if(damageMagnitude == 'K')
damageEstimation <- damageValue * (10 ** 3)
else if(damageMagnitude %in% c('m','M'))
damageEstimation <- damageValue * (10 ** 6)
else if(damageMagnitude == 'B')
damageEstimation <- damageValue * (10 ** 9)
else
damageEstimation <- damageValue
return(damageEstimation)
}
stormData$PROPDMG_VAL <- mapply(damageEstimation, stomData$PROPDMG, stomData$PROPDMGEXP)
evntByPropDmg <- sortEvntTypeByColumn(stomData, "PROPDMG_VAL", 10)
stormData$CROPDMG_VAL <- mapply(damageEstimation, stomData$CROPDMG, stomData$CROPDMGEXP)
evntByCropDmg <- sortEvntTypeByColumn(stomData, "CROPDMG_VAL", 10)
